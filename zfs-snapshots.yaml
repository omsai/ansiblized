---
- name: Scheduled backups
  hosts: localhost
  vars:
    dirs:
      - dataset: rpool/home/omsai/Sync
      - dataset: rpool/home/omsai/corelab1
      - dataset: rpool/home/omsai/kirschner-lab
    snapshots:
      - name: keep hourly snapshot for 1 week.
        special_time: hourly
        ttl: 1w
      - name: keep weekly snapshot for 1 month.
        special_time: weekly
        ttl: 1m
      - name: keep monthly snapshot for 6 months.
        special_time: monthly
        ttl: 6m

  tasks:

  # If the query directory does not exist, it's probably been renamed
  # and interrupted from being synchronized to the newly created ZFS
  # dataset.
  - name: Check whether directories exist
    stat:
      path: '{{ item.dataset | replace("rpool", "") }}'
    loop: '{{ dirs }}'
    register: stat
    tags: migrate

  # Add the is_dataset key to dirs.
  - name: Register directories that exist
    ansible.utils.update_fact:
      updates:
      - path: 'dirs[{{ ansible_loop.index0 }}].dir_exists'
        value: '{{ item }}'
      - path: 'dirs[{{ ansible_loop.index0 }}].is_dataset'
        value: '{{ item | ternary(none, false) }}'
      - path: 'dirs[{{ ansible_loop.index0 }}].dir'
        value: '{{ dirs[ansible_loop.index0].dataset | replace("rpool", "") }}'
    loop_control:
      extended: yes
    loop: >
      {{
      stat.results |
      map(attribute = "stat") |
      map(attribute = "exists")
      }}
    changed_when: false
    register: updated
    tags: migrate

  - name: Update dirs fact
    set_fact:
      dirs: '{{ "dirs" | extract(updated.results | last) }}'
    tags: migrate

  # If the query directory is not a dataset, the returned "mountpoint"
  # is another dataset containing the query directory, rather than an
  # exact match of the query directory.
  - name: Confirm whether directories are snapshottable ZFS datasets
    zfs_facts:
      name: '{{ item.dataset | replace("rpool", "") }}'
    loop_control:
      extended: yes
    loop: '{{ dirs }}'
    when: item.is_dataset != false
    register: zfs_facts
    tags: migrate

  - name: Register ZFS mountpoints from queried directories
    ansible.utils.update_fact:
      updates:
      - path: 'dirs[{{ item.ansible_loop.index0 }}].is_dataset'
        value: >-
          {{
          item | json_query("ansible_facts.ansible_zfs_datasets[0].mountpoint")
          == dirs[item.ansible_loop.index0].dir
          }}
    loop: '{{ zfs_facts.results }}'
    when: item | map(attribute = "ansible_facts.ansible_zfs_datasets.0.mountpoint")
    changed_when: false
    register: updated
    tags: migrate

  - name: Update dirs fact
    set_fact:
      dirs: '{{ "dirs" | extract(updated.results | last) }}'
    tags: migrate

  - name: Disable Syncthing before migrating any non-ZFS directories
    systemd:
      name: syncthing.service
      scope: user
      enabled: false
      state: stopped
    when: 'false in dirs | map(attribute = "is_dataset")'
    tags: migrate

  - name: Rename any non-ZFS directories before migration
    command: >
      mv 
      {{ item.dataset | replace("rpool", "") }}
      {{ item.dataset | replace("rpool", "") }}-nonzfs
    args:
      removes: '{{ item.dataset | replace("rpool", "") }}'
      creates: '{{ item.dataset | replace("rpool", "") }}-nonzfs'
    loop: '{{ dirs | rejectattr("is_dataset") }}'
    tags: migrate
    
  - name: Create datasets for any non-ZFS directories
    become: yes
    zfs:
      name: '{{ item.dataset }}'
      state: present
      extra_zfs_properties:
        canmount: on
    loop: '{{ dirs }}'
    tags:
      - migrate
      - mountable

  - name: Change ownership of datasets to original directories
    become: yes
    file:
      path: '{{ item.dir }}'
      owner: omsai
      group: omsai
    loop: '{{ dirs | rejectattr("is_dataset") }}'
    tags: migrate

  - name: Migrate any non-ZFS to ZFS directories
    become: true
    synchronize:
      src: '{{ item.dir }}-nonzfs/'
      dest: '{{ item.dir }}'
    loop: '{{ dirs | rejectattr("is_dataset") }}'    
    tags: migrate

  - name: Remove migrated non-ZFS directories
    file:
      path: '{{ item.dir }}-nonzfs'
      state: absent
    loop: '{{ dirs }}'
    tags: migrate

  - name: Re-enable Syncthing after migrating non-ZFS directories
    systemd:
      name: syncthing.service
      scope: user
      enabled: true
      state: started
    tags: migrate

  - name: Syncthing ignore ZFS snapshot directories
    lineinfile:
      create: true
      line: .zfs
      path: '{{ item.dataset | replace("rpool", "") }}/.stignore'
    loop: '{{ dirs }}'
    tags: syncthing-ignore-zfs

  - name: Install zfsnap
    become: yes
    apt:
      name: zfsnap

  - name: Schedule snaption cleanup
    become: yes
    cron:
      cron_file: zfsnap
      user: root
      name: Delete expired snapshots.
      job: /usr/sbin/zfSnap -d
      special_time: daily

  - name: Schedule spanshot creation
    become: yes
    cron:
      cron_file: zfsnap
      user: root
      name: '{{ item.0.dataset }} {{ item.1.name }}'
      job: '/usr/sbin/zfSnap -z -s -S -a {{ item.1.ttl }} {{ item.0.dataset }}'
      special_time: '{{ item.1.special_time }}'
    loop: '{{ dirs | product(snapshots) | list }}'
